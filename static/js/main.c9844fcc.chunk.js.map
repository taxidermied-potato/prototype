{"version":3,"sources":["components/ParallaxBack.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["calc","x","y","window","innerWidth","innerHeight","trans1","concat","trans2","trans3","trans4","PBCard","_useSpring","useSpring","xy","config","mass","tension","friction","_useSpring2","Object","slicedToArray","props","set","react_default","a","createElement","className","onMouseMove","_ref","clientX","clientY","web","div","style","transform","interpolate","ParallaxBack","Component","Content","Link","id","zIndex","components_ParallaxBack","App","components_Content","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAIMA,SAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,KACtEC,EAAS,SAACL,EAAGC,GAAJ,qBAAAK,OAAyBN,EAAI,IAA7B,OAAAM,OAAsCL,EAAI,IAAM,GAAhD,UACTM,EAAS,SAACP,EAAGC,GAAJ,qBAAAK,OAAyBN,EAAI,GAAK,IAAlC,OAAAM,OAA2CL,EAAI,GAA/C,kBAAAK,OAAkEN,EAAI,IAAO,GAA7E,iBAAAM,OAA+FN,EAAI,IAAnG,SACTQ,EAAS,SAACR,EAAGC,GAAJ,qBAAAK,OAAyBN,EAAI,GAAK,IAAlC,OAAAM,OAA2CL,EAAI,GAA/C,kBAAAK,OAAkEN,EAAI,IAAtE,iBAAAM,OAA0FN,EAAI,GAA9F,SACTS,EAAS,SAACT,EAAGC,GAAJ,qBAAAK,OAAyBN,EAAI,GAAK,IAAlC,OAAAM,OAA2CL,EAAI,GAA/C,kBAAAK,OAAkEN,EAAI,IAAM,GAA5E,iBAAAM,OAA8FN,EAAI,IAAlG,SAEf,SAASU,IAAS,IAAAC,EACOC,YAAU,iBAAO,CAAEC,GAAI,CAAC,EAAG,GAAIC,OAAQ,CAAEC,KAAM,GAAIC,QAAS,IAAKC,SAAU,QADlFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GACPU,EADOH,EAAA,GACAI,EADAJ,EAAA,GAEd,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,YAAa,SAAAC,GAAA,IAAY5B,EAAZ4B,EAAGC,QAAqB5B,EAAxB2B,EAAeE,QAAf,OAAgCR,EAAI,CAAET,GAAId,EAAMC,EAAIE,OAAOC,WAAa,EAAIF,OAClHsB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAAY9B,MACzEkB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAAY5B,MACzEgB,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAAY1B,MACzEc,EAAAC,EAAAC,cAACM,EAAA,EAASC,IAAV,CAAcN,UAAU,QAAQO,MAAO,CAAEC,UAAWb,EAAMR,GAAGsB,YAAY3B,WAWtE4B,mLAJP,OAAQb,EAAAC,EAAAC,cAACf,EAAD,aAFW2B,aCWZC,mBA1BPC,sLAIJ,OACEhB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBAAkBc,GAAG,QACtCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYO,MAAO,CAAEQ,OAAQ,IAC1ClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiB,EAAD,iBAPQL,cCIPM,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmB,EAAD,QCIcC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9844fcc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { useSpring, animated } from 'react-spring'\r\nimport '../styles/ParallaxBack.css'\r\n\r\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\r\nconst trans1 = (x, y) => `translate3d(${x / 100}px,${y / 100 - 20}px,0)`\r\nconst trans2 = (x, y) => `translate3d(${x / 20 - 650}px,${y / 20}px,0) rotateZ(${x / 1000 - 12}deg) rotateY(${x / 100}deg)`\r\nconst trans3 = (x, y) => `translate3d(${x / 15 - 450}px,${y / 15}px,0) rotateZ(${x / 300 }deg) rotateY(${x / 80}deg)`\r\nconst trans4 = (x, y) => `translate3d(${x / 20 - 250}px,${y / 20}px,0) rotateZ(${x / 300 + 10}deg) rotateY(${x / 100}deg)`\r\n\r\nfunction PBCard() {\r\n    const [props, set] = useSpring(() => ({ xy: [0, 0], config: { mass: 10, tension: 550, friction: 140 } }))\r\n    return (\r\n        <div className=\"p-container\" onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc((x + window.innerWidth / 8), y) })}>\r\n            <animated.div className=\"card1\" style={{ transform: props.xy.interpolate(trans1) }} />\r\n            <animated.div className=\"card2\" style={{ transform: props.xy.interpolate(trans2) }} />\r\n            <animated.div className=\"card4\" style={{ transform: props.xy.interpolate(trans4) }} />\r\n            <animated.div className=\"card3\" style={{ transform: props.xy.interpolate(trans3) }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nclass ParallaxBack extends Component {\r\n    render() {\r\n        return (<PBCard />)\r\n    }\r\n}\r\n\r\nexport default ParallaxBack;","import React, { Component } from 'react';\r\nimport ParallaxBack from './ParallaxBack';\r\nimport '../styles/Content.css';\r\n\r\nimport { Divider, Anchor, Avatar, Icon } from 'antd';\r\nimport { Collapse } from 'react-collapse';\r\n\r\nconst { Link } = Anchor;\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <main>\r\n        <section className=\"content-section\" id=\"home\">\r\n          <div className=\"hero px-4\" style={{ zIndex: 0 }}>\r\n            <div className=\"hero-item\">\r\n              <ParallaxBack />\r\n            </div>\r\n            {/* <div className=\"hero-item ml-5 mb-3\" style={{ zIndex: 1 }}>\r\n              <h1 className=\"text-shadow\"> lo-fi prototype </h1>\r\n              <div className=\"pl-1 text-shadow\">\r\n                <p>\r\n                  <b>haha, not really.</b> Imagine doing things when you can just screenshot the emulator.\r\n                </p>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport './styles/App.css';\r\nimport Content from './components/Content'\r\nimport { Icon } from 'antd';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Content />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}